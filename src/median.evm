// Median Implementation in EVM bytecode
//
//       Storage layout
// slot                 name
// --------------------------------------
// 0                     wards
// 1                     val
// 2                     age
// 3                     bar
// keccak(address,4)     orcl
// keccak(address,5)     bud
// keccak(uint8,6)       slot
//





# constructor

61 -> end
61 : start
60 00
39
61 -> end
60 00
f3





# start

60 00
35
60 e0
1c
80
63 89 bb b8 b2         // poke(uint256[],uint256[],uint8[],bytes32[],bytes32[])
14
61 -> poke
57
80
63 35 2d 3f ba         // setBar(uint256)
14
61 -> setBar
57
63 94 31 81 06         // lift(address[])
14
61 -> lift
57
60 00
60 00
fd



# poke
5b
50

// copy calldata to memory
60 04
36
03
60 04
60 00
37

// obtain bar
60 03                  // bar
54

// ensure bar is greater than zero
80
15
61 -> bar-too-low
57

// ensure arrays have bar length
60 00
# bar-loop
5b
81
81
51
51
14
15
61 -> bar-too-low
57
60 20
01
80
60 a0
11
61 -> bar-loop
57
50

// multiply bar by 0x20 and add 0x20
60 20
02
60 20
01

// get free memory position
60 04
36
03

// add wat to memory
80
60 40
01
// ethusd
7f 65 74 68 75 73 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
90
52

// add signature prefix to memory
80
60 60
01
7b 19 45 74 68 65 72 65 75 6d 20 53 69 67 6e 65 64 20 4d 65 73 73 61 67 65 3a 0a 33 32
90
52

90                     // [free, BAR]

// add 'bloom' to stack
60 00
91
90

// add 'last' to stack
60 00
91
90

// loop over arrays
60 20                  // [bloom, last, free, BAR, I+20]<
# array-loop
5b

// loop over args
60 00
90
60 00                  // [bloom, last, free, BAR, gap, I+20, J]<
# arg-loop
5b
81
81
51
01
51
85
82
01
84
01
52

// set gap
80
60 20
14
15
61 -> iterate-arg-loop
57
91
60 80
01
91

# iterate-arg-loop
5b
60 20
01
80
60 a0
11
61 -> arg-loop
57
50
90
50

// hash val[i] + age[i] + wat
60 60
83
20
83
60 80
01
52

// hash message header + data
60 3c
83
60 64
01
20
83
60 a0
01
52

// recover signer
60 20
83
61 01 20
01
60 80
85
60 a0
01
60 01
5a
fa
50

// ensure signer is oracle
60 40
83
61 01 20
01
80
60 20
01
60 04
90
52
20
54
60 01
14
15
61 -> invalid-oracle
57

// ensure message is recent
60 02
54
83
60 20
01
51
11
15
61 -> stale-message
57

// ensure messages are in order
82
51
80
85
11
61 -> not-in-order
57
93
50

// ensure signer is unique
82
61 01 20
01
51
60 98
1c
80
86
90
1c
60 02
90
06
15
15
61 -> already-signed
57
60 02
0a
85
01
94
50

// iterate
60 20
01
81
81
14
15
61 -> array-loop
57
50                      // [bloom, last, free, BAR]<
50                      // [bloom, last, free]<
50                      // [bloom, last]<
50                      // [bloom]<
50                      // []<

// set val
60 00
51
80
51
60 01
1c
60 20
02
60 20
01
01
51
80
60 00
52
60 01
55

// set age
42
60 02
55
42
60 20
52

// emit event
7f b7 8e bc 57 3f 1f 88 9c a9 e1 e0 fb 62 c8 43 c8 36 f3 d3 a2 e1 f4 3e f6 29 40 e9 b8 94 f4 ea 4c
60 40
60 00
a1

00



# setBar
5b
60 04
35
60 03
55
00



# lift // TODO: add slot logic
5b
60 24
35
60 20
02
60 44
01
60 44           // [LENGTH+44, I+44]<
# address-loop
5b

// save oracle
80
35
60 00
52
60 04
60 20
52
60 40
60 00
20
60 01
90
55

// iterate
60 20
01
81
81
14
15
61 -> address-loop
57
50
50
00



# bar-too-low
5b
7f 4d 65 64 69 61 6e 2f 62 61 72 2d 74 6f 6f 2d 6c 6f 77 00 00 00 00 00 00 00 00 00 00 00 00 00 00
60 00
52
60 20
60 00
fd



# invalid-oracle
5b
7f 4d 65 64 69 61 6e 2f 69 6e 76 61 6c 69 64 2d 6f 72 61 63 6c 65 00 00 00 00 00 00 00 00 00 00 00
60 00
52
60 20
60 00
fd



# stale-message
5b
7f 4d 65 64 69 61 6e 2f 73 74 61 6c 65 2d 6d 65 73 73 61 67 65 00 00 00 00 00 00 00 00 00 00 00 00
60 00
52
60 20
60 00
fd



# not-in-order
5b
7f 4d 65 64 69 61 6e 2f 6d 65 73 73 61 67 65 73 2d 6e 6f 74 2d 69 6e 2d 6f 72 64 65 72 00 00 00 00
60 00
52
60 20
60 00
fd



# already-signed
5b
7f 4d 65 64 69 61 6e 2f 6f 72 61 63 6c 65 2d 61 6c 72 65 61 64 79 2d 73 69 67 6e 65 64 00 00 00 00
60 00
52
60 20
60 00
fd





# end